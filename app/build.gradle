plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.ksp)
    alias(libs.plugins.hilt)
}

android {
    namespace 'com.jericx.trainr'
    compileSdk 35

    defaultConfig {
        applicationId "com.jericx.trainr"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Configuration for build variants can be added here if needed
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    flavorDimensions "environment"

    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        sit {
            dimension "environment"
            applicationIdSuffix ".sit"
            versionNameSuffix "-sit"
        }

        prod {
            dimension "environment"
        }
    }

    applicationVariants.configureEach { variant ->
        def versionName = defaultConfig.versionName
        def flavorName = variant.flavorName.toUpperCase()

        if (variant.name == 'prodRelease') {
            variant.mergedFlavor.manifestPlaceholders = [appName: "Trainr"]
        } else {
            variant.mergedFlavor.manifestPlaceholders = [appName: "Trainr $versionName $flavorName"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

// KSP configuration
ksp {
    arg("dagger.fastInit", "enabled")
    arg("dagger.hilt.android.internal.disableAndroidSuperclassValidation", "true")
}

dependencies {
    // Compose BOM
    implementation platform(libs.compose.bom)
    implementation libs.bundles.compose

    // Core Android dependencies
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose

    // Debug dependencies
    debugImplementation libs.bundles.compose.debug

    // Coil Compose
    implementation libs.coil.compose

    // Lifecycle
    implementation libs.bundles.lifecycle

    // Accompanist
    implementation libs.accompanist.flowlayout

    // Dagger - Hilt (using KSP instead of KAPT)
    implementation libs.hilt.android
    ksp libs.hilt.android.compiler
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.hilt.navigation.compose

    // Paging
    implementation libs.bundles.paging

    // Networking (ready for AI API integration)
    implementation libs.bundles.networking
    // Note: moshi-kotlin-codegen KSP will be added when we start using Moshi annotations

    // Room (using KSP)
    implementation libs.bundles.room
    ksp libs.room.compiler

    // Testing
    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.compose.ui.test.junit4
    androidTestImplementation libs.hilt.android.testing
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.mockk
    testImplementation libs.androidx.arch.core.testing
    testImplementation libs.truth
    testImplementation libs.hilt.android.testing
    kspTest libs.hilt.android.compiler
}